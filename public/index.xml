<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Samay15jan</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Samay15jan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 18 Aug 2025 23:59:15 +0530</lastBuildDate><atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Breaking Into Apple’s Walled Garden (Almost)</title>
      <link>http://localhost:1313/posts/getting-started-with-linux-copy/</link>
      <pubDate>Mon, 18 Aug 2025 23:59:15 +0530</pubDate>
      
      <guid>http://localhost:1313/posts/getting-started-with-linux-copy/</guid>
      <description>I didn’t set out to fight the system, but here we are.</description>
      <content:encoded><![CDATA[<h3 id="introduction">Introduction</h3>
<p>All I wanted was simple solution to a bigger problem:<br>
<strong>Develop and run my own app on my own iPhone without paying Apple a dime.</strong></p>
<p>If you’ve ever tried developing for <a href="https://developer.apple.com/ios/">iOS</a>, you know how locked down the ecosystem is. Unlike Android, where you can just download and install an APK, iOS has always been about control. Apple decides what goes in, and unless you pay $100/year, own a Mac, to test and follow their endless rules—you’re stuck.</p>
<p>That’s fine if you’re a big company. But for students, indie devs, or hobbyists on Windows/Linux, it feels impossible.</p>
<p>And yet, I found a way.<br>
Not a perfect way. Not a sustainable way. But it just works.</p>
<hr>
<h3 id="the-early-days-of-sideloading">The Early Days of Sideloading</h3>
<p>My journey started with something very non-serious and personal: <strong>removing ads from YouTube on iOS.</strong></p>
<p>On Android, we have <em>coughs</em>&hellip;<a href="https://revanced.app/"><em>ReVanced</em></a> and other mods. On iOS? Things weren’t so easy. I stumbled upon sideloading and thought it meant jailbreaking at first. Turns out—it didn’t.</p>
<p>I grabbed some cracked <code>.ipa</code> files (basically iOS’s version of <code>.apk</code>) but had no idea how to install them. That’s when I entered the chaotic world of sideloading tools: <a href="https://sidestore.io/"><strong>Sidestore</strong></a> (which didn’t work), <a href="https://sideloadly.io/"><strong>Sideloadly</strong></a> (with no Linux support), <a href="https://github.com/SideStore/sideloader"><strong>Sideloader</strong></a> (almost worked) and finally <a href="https://altstore.io/"><strong>AltStore</strong></a> + <a href="https://github.com/NyaMisty/AltServer-Linux"><strong>AltServer-Linux</strong></a> which brought some magic with more problems along the way.</p>
<p>AltStore was a revelation but only when you understand its working. But then came Apple’s infamous <strong>3-app limit.</strong> I tried hacking around it: running multiple Docker containers, different Apple IDs, even modding AltStore into “AltStoreX”, just to bypass the limit.</p>
<p>Still after days of <code>.plist</code> editing which itself was pain, especially when binaries get messed up, I got two different AltStore instances working independently on one device… only to realize the 3-app limit is tied to the <strong>device itself</strong>, not the Apple ID. Brutal.</p>
<p>Eventually, I discovered <a href="https://github.com/opa334/TrollStore"><strong>TrollStore</strong></a>, which exploited a vulnerability (like <a href="https://github.com/dora2-iOS/macdirtycow-exploit"><strong>macdirtycow</strong></a>) to bypass refresh limits entirely. No 7-day expiry. No re-signing. It was glorious.</p>
<p><em>(Caveat: TrollStore only works on specific iOS versions/devices.)</em></p>
<hr>
<h3 id="the-real-problem">The Real Problem</h3>
<p>Sideloading mods was fun, but the real problem hit me when I started working on my own app:<br>
<a href="https://github.com/samay15jan/sparklines-mobile">Sparklines Mobile</a>, a music streaming app built with <strong>React Native + <a href="https://expo.dev/">Expo</a></strong> (unfinished and might never be anyways).</p>
<p>On Android, Expo’s <a href="https://docs.expo.dev/eas/"><strong>EAS build system</strong></a> worked flawlessly. I could build an <code>.apk</code> and install it in minutes.<br>
On iOS? Different story.</p>
<ul>
<li>
<p>Simulator builds only, not real <code>.ipa</code>s</p>
</li>
<li>
<p>Need a paid <a href="https://developer.apple.com/programs/">Apple Developer Account</a></p>
</li>
<li>
<p>Need <a href="https://www.apple.com/macos/">macOS</a> + <a href="https://developer.apple.com/xcode/">Xcode</a> for building, and a specific iOS device to test it</p>
</li>
<li>
<p>and distribution is impossible too</p>
</li>
</ul>
<p>As someone on Linux, that was a dead end. But then I had a thought:<br>
<strong>What if I could just get an unsigned <code>.ipa</code> and sideload it manually?</strong></p>
<p>Apple wants that to happen only on macOS. Challenge accepted.</p>
<hr>
<h3 id="the-breakthrough">The Breakthrough</h3>
<p>While digging around, I noticed projects like <a href="https://github.com/qnblackcat/uYouPlus"><strong>uYouPlus</strong></a> and <a href="https://github.com/whoeevee/EeveeSpotify"><strong>EeveeSpotify</strong></a> were building <code>.ipa</code> files using <strong><a href="https://docs.github.com/en/actions">GitHub Actions</a></strong> on macOS runners.</p>
<p>That’s when it clicked:<br>
<strong>Why not do the same for Expo apps?</strong></p>
<p>I spent hours fighting with YAML configs, debugging failed builds, and experimenting with different workflows. Eventually, I managed to get GitHub’s macOS runners worked the way I wanted and generate an unsigned <code>.ipa</code> and sideloaded with AltStore/TrollStore.</p>
<p>Guess what ? It worked.<br>
I had my own React Native app running on my iPhone—no Mac, no paid Apple account, nothing.</p>
<p>Sure, crashes were ugly (probably because I hadn’t set up error boundaries properly within my application codebase), but native modules worked fine. It felt surreal.</p>
<hr>
<h3 id="the-tool-that-could-have-been">The Tool That Could Have Been</h3>
<p>At this point, I considered turning the whole process into a tool. Maybe:</p>
<ul>
<li>
<p>A <strong>CLI</strong> to auto-generate the GitHub Actions workflow</p>
</li>
<li>
<p>Or a <strong>web app</strong> frontend where you could link your GitHub account and upload code, and it spits out an <code>.ipa</code>. Something like <a href="https://vercel.com/"><strong>Vercel</strong></a> for mobile apps.</p>
</li>
</ul>
<blockquote>
<p>PS: There are things like <a href="https://github.com/hack-different/webmuxd">webmuxd</a> which could be a game changer.</p></blockquote>
<p>Basically, a free alternative to Expo’s paid EAS service—but for people who just want to test and learn without Apple’s gatekeeping, legally and ethically, and for personal use only.</p>
<p>I had some ideas and minimal executional logic… but never turned into something real. And maybe i didn’t even need to anymore. I was already moving away from iOS.</p>
<p>Still, I pushed what I had to GitHub: <a href="https://github.com/samay15jan/Altux"><strong>Altux</strong></a><br>
You could refer to GitHub Action template and README file in the repository for some nitty gritty, behind the scenes working.<br>
If anyone wants to build on top of it, go ahead.</p>
<hr>
<h3 id="conclusion">Conclusion</h3>
<p>This whole thing started because I just wanted to test an iOS app without paying Apple. And in the process, I learned a lot about sideloading, CI, and Apple’s walls.</p>
<p>I’m not maintaining this project, and I’m not sticking with iOS either. But maybe this little experiment will help students, indie devs, or tinkerers who just want to learn without paying $100/year for the privilege.</p>
<p>Apple may have a walled garden, but sometimes a crack in the wall is all you need to learn, build, and experiment. Altux was mine. Waiting for yours&hellip;</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>How I Built a TUI Without Leaving the Terminal</title>
      <link>http://localhost:1313/posts/how-i-build-a-tui-without-leaving-the-terminal/</link>
      <pubDate>Mon, 14 Apr 2025 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/how-i-build-a-tui-without-leaving-the-terminal/</guid>
      <description>Sparklines TUI project showcasing the power of terminals.</description>
      <content:encoded><![CDATA[<h3 id="what-does-tui-even-mean">What does TUI even mean?</h3>
<p>Terminals are an overly complexified yet quick way to interact with the system and any task without leaving the terminal&hellip; ever. TUI stands for Terminal User Interface. Basically, it&rsquo;s a way to use some software features directly from the terminal with a user-intrusive interface, and use the keyboard to control everything.</p>
<p>I know you might not understand it at first, because terminals are complex in their own way. So, it’s a step forward.</p>
<blockquote>
<p><strong>PS</strong>: In this article, don’t expect much of a learning experience, it&rsquo;s more about me showcasing a project I built for the terminal. And it’s definitely not gonna help you in your career ever. haha. So proceed wisely.</p></blockquote>
<hr>
<p><a href="https://asciinema.org/a/696484">
  <img loading="lazy" src="https://raw.githubusercontent.com/samay15jan/Sparklines/main/TUI/demo.png" alt="project-screenshot"  /></a></p>
<hr>
<h3 id="why-tui-matters">Why TUI matters</h3>
<p>We live in a world where everything is graphical, flashy, and requires 12GB of RAM to open a note-taking app (<em><del>Definitely not targeting Notion</del></em>). But sometimes, being raw is power. Terminals give you that rawness.</p>
<p>It’s not just about nostalgia or being geeky for fun. TUI tools are:</p>
<ul>
<li>
<p>Blazing fast (like seriously instant)</p>
</li>
<li>
<p>Keyboard-driven, so your hands never leave the keys and forget the mouse even exists</p>
</li>
<li>
<p>Often more scriptable and composable</p>
</li>
<li>
<p>Lightweight and can run on toasters (or potatoes, if u prefer them)</p>
</li>
</ul>
<p>For devs, sysadmins, hobbyists, and even minimalists, TUI is not just a UI – it&rsquo;s a philosophy.<br>
And if you can make your own (even if it’s not fully polished)? Damn right it&rsquo;s still worth flexing.</p>
<h3 id="what-did-i-do">What did I do?</h3>
<p>A long time ago, somewhere in February of 2024, I got an idea to build myself a music streaming platform, &lsquo;caz at that time I was good with frontend web development. But I wanted to expand more, and what&rsquo;s the best way to learn than hands-on experience? That’s how I started learning backend. Fast forward 6–7 months, my web application was ready. I’ll explain the entire workflow in some other blog someday. For now, u can refer to GitHub <a href="https://github.com/samay15jan/sparklines">here</a>.</p>
<p>So, from here I got an idea—why not use the custom backend (which I built on top of an open-source project <a href="https://github.com/sumitkolhe/jiosaavn-api">here</a>—I can’t remember if it was v2 or v3. idk) and build a terminal user interface to control music directly from the terminal? (Because other open-source projects were related to Spotify TUI and required a paid account with Spotify open in the background). But I needed something based on my use case, which I could run in the background while I was lost in coding sessions <em><strong>and didn’t eat up 60% of my RAM</strong></em>. I needed something like a command to run, and I could play any song I want directly from the terminal itself. After all, it’s going to be the coolest way to stream your music from the terminal!</p>
<blockquote>
<p><strong>NOTE</strong>: Just to be honest — it doesn’t &ldquo;stream&rdquo; like you think. My custom backend (built on top of JioSaavn) grabs the full song URL. Then I just pass that URL to <code>mpv</code>, a media player. Simple and effective, yet works like a charm.</p></blockquote>
<p>For quite some time, this project was just sitting idle in my TO-DO list while I did my research on finding the perfect way I could do that. And that’s when I found <a href="https://github.com/vadimdemedes/ink">Ink</a>. It&rsquo;s a way I can use React for interactive command-line apps. Yeah, it&rsquo;s old but it’s a well-maintained and documented open-source project. I found it to be a perfect fit for my use case, ‘caz I did know JS/TS well and had hands-on experience in React itself. So, I believed it was going to be fun to build. Also, I couldn&rsquo;t find anyone who took this approach to build a highly intrusive TUI with React and Ink specifically, so either I’m making history or I’m one step closer to becoming that mad guy. <em>Win-Win situation haha.</em></p>
<p>So, I went all in. Can’t truly recall how long it took me to build—somewhere around a month.<br>
Oh shit&hellip; been talking all this time and didn’t tell u what I named it: <a href="https://github.com/samay15jan/Sparklines/tree/main/TUI"><strong>Sparklines-TUI</strong></a>. hehe</p>
<hr>
<h3 id="tech-stack">Tech Stack</h3>
<p><strong>Languages &amp; Tools:</strong></p>
<ul>
<li>
<p>NodeJS + TypeScript</p>
</li>
<li>
<p><a href="https://github.com/vadimdemedes/ink">Ink</a> and <a href="https://github.com/vadimdemedes/ink-ui">Ink-UI</a></p>
</li>
<li>
<p>mpv (for music playback)</p>
</li>
<li>
<p>Custom backend (on top of JioSaavn)</p>
</li>
<li>
<p>Socket &amp; fs handling in Node for communication with mpv</p>
</li>
<li>
<p>Works in Termux (Android) (unstable)</p>
</li>
<li>
<p>Vim/Google IDX (now Firebase Studio)</p>
</li>
</ul>
<blockquote>
<p>Some features are not yet implemented, but the basic functionality has been achieved, though there might be unknown bugs. You can report <a href="https://github.com/samay15jan/Sparklines/issues">here</a>, and chances are I might never fix them. hehe, so try doing some work yourself, and contributions are welcome.</p></blockquote>
<hr>
<h3 id="building-the-ui">Building the UI</h3>
<p>Definitely, React + Ink streamlined the approach to build the tool, because I was able to use previous web development knowledge and not much of a learning curve either. It was definitely something worth it. I know people will say it&rsquo;s not good, design/system architecture sucks, should’ve used Rust or ncurses or something similar, and so on. Definitely agree with some things, but the reason I built it was to solve a problem I couldn’t find a solution for anywhere. So I created it for myself, and it serves the purpose and works as expected. Also, Rust or ncurses introduces a steep learning curve.</p>
<h4 id="my-work-environment">My work environment</h4>
<p>I used Vim mostly while I was building this. I cloned the Ink repo to read docs side by side. Definitely worth it. Vim itself is a skill, though it’s not that good for actual coding, and messing around with nvim felt like a burden. So I switched gears to a cloud IDE (Google IDX) for development, and it did increase my coding speed a lot, especially with Nix package management.</p>
<h4 id="challenges-in-the-journey">Challenges in the journey</h4>
<p>The biggest challenge I faced was getting some sort of way to play music. So I picked the easiest route—I directly implemented it with <a href="https://mpv.io/">mpv</a> and I channeled logs of mpv (which had timestamps, which I needed) to a log file under the <code>.sparklines</code> folder, and managed it with a socket (a two-way communication endpoint to handle the custom commands). With the power of NodeJS, I made it work out and somehow it turned out a lot better than expected. Also, configuration files can be accessed at <code>.sparklines/config</code>.</p>
<p>For sure, <strong>Ink</strong> was something ahead of its time. It has everything one needs to build something like this. At least for fun. I faced challenges when I was working with the UI itself, though it took me some time to perfectionate it and make it modular and work with custom shortcuts. Packaging was a very simple and quick task.</p>
<blockquote>
<p>BTW, u can get it directly using <code>npm i sparklines-tui -g</code>.</p></blockquote>
<h4 id="some-features">Some Features</h4>
<ul>
<li>
<p>Control music directly from the terminal</p>
</li>
<li>
<p>Login/Register functionality</p>
</li>
<li>
<p>API key-based interaction with <a href="https://github.com/samay15jan/sparklines-backend">Sparklines Backend</a></p>
</li>
<li>
<p>Continuous playback (still buggy) and clean playback bar</p>
</li>
<li>
<p>Custom shortcuts &amp; help menu (Alt+h)</p>
</li>
<li>
<p>Search songs, albums, and artists</p>
</li>
<li>
<p>Music language selector</p>
</li>
<li>
<p>Recommendations &amp; infinite play (work in progress) [TODO]</p>
</li>
<li>
<p>Loop, shuffle, queue, and lyrics support (coming soon) [TODO]</p>
</li>
<li>
<p>NPM packaged and works on Termux (to some extent)</p>
</li>
</ul>
<blockquote>
<p>For installation, refer to <a href="https://github.com/samay15jan/Sparklines/tree/main/TUI">docs</a>.</p></blockquote>
<h4 id="help-menu">Help Menu</h4>
<p>Some useful commands (can be accessed through Alt + h):</p>
<pre tabindex="0"><code>Tab                 → Navigate between sections  
Spacebar            → Toggle between play and pause  
Enter               → Select the selected item  
Ctrl + m            → Mute/unmute the audio  
Ctrl + x            → Hide other section  
Ctrl + z            → Toggle search  
Ctrl + a/s/d/f      → Focus on menu/playlists/simulation/other section  
Ctrl + k/l/;        → Toggle between search/lyrics/queue section  
↑ and ↓             → Navigate up and down between items  
] or [              → Increase/decrease volume by 5  
Ctrl + ➡ / Ctrl + ⬅ → Seek forward/backward by 5 seconds  
Ctrl + ➡ / Ctrl + ⬅ → Increase/decrease speed by 0.2x  
Alt + h             → Display/close this help menu  
Esc                 → Quit the app
</code></pre><hr>
<p><a href="https://asciinema.org/a/696484">
  <img loading="lazy" src="https://asciinema.org/a/696484.svg" alt="TUI Demo"  /></a></p>
<hr>
<h3 id="final-thoughts">Final Thoughts</h3>
<p>I don’t expect anyone to care (but u should care). Honestly, this was more for me. To learn, to experiment, to see if I could push the limits of terminal UI in JS. And it did that.<br>
And that’s what matters the most. If you&rsquo;re building something and it excites you, then even if no one else claps, you&rsquo;ve still won.</p>
<p>Until next time. stay in terminal. peace</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Part 1: Getting Started With Linux</title>
      <link>http://localhost:1313/posts/getting-started-with-linux/</link>
      <pubDate>Tue, 10 Dec 2024 23:59:15 +0530</pubDate>
      
      <guid>http://localhost:1313/posts/getting-started-with-linux/</guid>
      <description>Part 1 of the Ultimate Guide to Mastering Linux: From Beginner to Advanced</description>
      <content:encoded><![CDATA[<h2 id="introduction-to-linux">Introduction to Linux</h2>
<h3 id="what-is-linux-million-dollar-question">What is Linux? Million Dollar Question</h3>
<p>Linux is a kernel for computer systems that is used worldwide. <em>Yeah, even the social media you use on your phone could be backed up by a Linux server.</em> Some people call it an operating system. However, Linux itself is only the kernel. When combined with other components like software utilities and libraries, it forms a complete OS, often called a &ldquo;Linux distribution&rdquo;—<em>you will get to know about it later in this blog.</em></p>
<h3 id="why-is-linux-important">Why is Linux important?</h3>
<p>Firstly, here are some solid stats from <a href="https://truelist.co/blog/linux-statistics">TrueList</a>:</p>
<ul>
<li>96.3% of the top one million web servers are running Linux. (ZDNet)</li>
<li>Yep, the very same Linux is powering a whopping 85% of smartphones out there. (Linuxblog)</li>
<li>The world’s top 500 fastest supercomputers all run on Linux. (Blackdown)</li>
<li>47% of professional developers (<em>like me</em>) use Linux-based operating systems. (Statista)</li>
<li>Today&hellip; <em>maybe not when you are reading this</em>, there are over 600 active Linux distros. (Tecmint)</li>
</ul>
<p>Most importantly, Linux is also one of the biggest open-source projects, which means all its code is publicly accessible. Anyone—<em>maybe even you after reading this blog</em>—can modify and distribute its code, and it’s developed collaboratively with our very own Linux community.</p>
<p>Which means it gives freedom and a sense of independence directly into the hands of the user to do whatever they want, without any higher body governing like what we usually get in other OSes, while maintaining the latest updates which don&rsquo;t take hours to install—that too at zero cost.</p>
<blockquote>
<p><strong>Did you know?</strong><br>
Windows gets shattered,<br>
Apples get rotten,<br>
but penguins, they don’t drown&hellip; wait&hellip; do they?<br>
Fires up browser&hellip;&ldquo;can penguins dieee?&rdquo;<br>
Waits&hellip; waits intensively&hellip;<br>
Google: &ldquo;Please verify you are not a robot.&rdquo;<br>
Clicks&hellip; clicks&hellip; submit<br>
Google: &ldquo;Yes, penguins do die like every other living organism, you dumbass. But they do live longer than Windows and Apples.&rdquo;</p></blockquote>
<h3 id="the-birth-of-linux">The Birth of Linux</h3>
<p>The backstory of Linux is straightforward. At the heart of it all is <a href="https://en.wikipedia.org/wiki/Linus_Torvalds">Linus Torvalds</a>, an incredible programmer, who laid the foundation bricks for what we now know as Linux. Over the years, a global community of talented developers has built on that foundation, continually enhancing and evolving the system.</p>
<p>That&rsquo;s all you gotta know. You can anytime fire up Wikipedia and learn about the cheeky little details, but I would recommend—<strong>theory is not something you should focus much on, especially for technical stuff</strong>. For your knowledge, surely go for it.</p>
<p>But for now, that&rsquo;s out of the goals for this blog.</p>
<h2 id="understanding-the-computer-system-architecture">Understanding the Computer System Architecture</h2>
<h3 id="layers-of-a-computer">Layers of a Computer</h3>
<p>Let&rsquo;s understand the working of a computer. According to my research, there are basically three main layers of a computer:</p>
<ul>
<li><strong>Layer 1</strong>: This is the <strong>hardware</strong> layer, which consists of the physical components of the computer, such as the CPU, memory, storage devices, or that RTX 4090 Ti graphics card which you asked your mother to buy, stating it is the bare minimum for your studies.</li>
<li><strong>Layer 2</strong>: This is the <strong>kernel</strong>, the most crucial layer in the system. It acts as an intermediary between the hardware and the software, managing resources like memory, processing power, and devices. The kernel ensures that software can interact with hardware safely and efficiently.</li>
<li><strong>Layer 3</strong>: This is the <strong>user interface</strong> layer, where users interact with the system. It includes the graphical user interface (GUI) and applications. This layer allows users to perform tasks such as browsing the web, creating those boring presentations, and running programs.</li>
</ul>
<p>Think of the kernel as the manager of all system resources. It ensures that software can talk to the hardware and access resources, but it also ensures that the system runs efficiently and securely by controlling access and managing tasks.</p>
<blockquote>
<p><strong>NOTE</strong>: If you want to dive deeper into the relationship between the computer and hardware, consider checking out <a href="https://www.geeksforgeeks.org/computer-organization-and-architecture-tutorials/">this</a>.</p></blockquote>
<h3 id="the-role-of-the-kernel-in-linux">The Role of the Kernel in Linux</h3>
<p>Here are some of the key roles the kernel plays as an interface between hardware and software:</p>
<ul>
<li><strong>Process Management</strong> - Handles the creation, execution, and termination of processes.</li>
<li><strong>Memory Management</strong> - Allocates and deallocates RAM for processes in a sandboxed manner.</li>
<li><strong>Device Management</strong> - Controls hardware devices such as keyboards, mice, or any plug-and-play device like USBs via device drivers.</li>
<li><strong>File System Management</strong> - Handles file read/write operations, including access control and permissions for files and directories.</li>
<li><strong>Networking</strong> - From IP addresses to firewalls, even the communication between processes over networks is handled by the kernel.</li>
</ul>
<h2 id="setting-up-your-playground">Setting up your playground</h2>
<p>Before moving forward, I personally have this ideology that any knowledge learned by hands-on experience will help you grasp concepts more quickly and efficiently. You can skip this part, but it would be good if you give it a shot.</p>
<h3 id="installing-linux-virtual-machine-bare-metal-wsl-cloud">Installing Linux (Virtual Machine, Bare Metal, WSL, Cloud)</h3>
<p>To start using Linux, I personally would recommend going with <a href="https://pop.system76.com/">Pop!_OS</a>.
You got a few options here: either you can run it on a VM or install it on Bare Metal.
<em>Don&rsquo;t worry, I got you covered—you can use any one of the following methods:</em></p>
<h4 id="virtual-machine-recommended">Virtual Machine (Recommended):</h4>
<p>It&rsquo;s like installing an OS inside your running system but virtually, which means you don&rsquo;t have to worry if you mess up something. Your main system will work just fine.
Here are the steps:</p>
<ul>
<li>Install either <a href="https://www.oracle.com/virtualization/technologies/vm/downloads/virtualbox-downloads.html">VirtualBox</a> or <a href="https://www.vmware.com/">VMWare</a> on your Windows/Mac machine (<em>for this, your device must support virtualization, which should work in most cases unless you have a very old/potato PC, or you might have to enable it in BIOS. Follow some tutorials for that—it&rsquo;s not a big thing</em>).</li>
<li>Download the Linux Pop!_OS ISO from <a href="https://pop.system76.com/">here</a>. You could try <a href="https://ubuntu.com/download">Ubuntu</a> too.</li>
<li>Simply create a new VM, allocate RAM and storage, load the downloaded ISO, and run it.</li>
<li>Follow the on-screen instructions to install Linux or use the live environment.</li>
</ul>
<blockquote>
<p><strong>Note</strong>: There are plenty of guides on the internet—just follow any one.</p></blockquote>
<h4 id="bare-metal">Bare Metal:</h4>
<p>This step involves installing Linux directly on your system. It will delete your Windows forever, and you cannot recover it. There are ways like dual booting (<em>installing two OSes on one device</em>). But for now, let&rsquo;s focus on a clean installation of Linux on your system:</p>
<ul>
<li>Download the Linux Pop!_OS ISO from <a href="https://pop.system76.com/">here</a>. You could try <a href="https://ubuntu.com/download">Ubuntu</a> too.</li>
<li>Download and install <a href="https://etcher.balena.io/">Balena Etcher</a> or <a href="https://rufus.ie/en/">Rufus</a> for creating a bootable USB.</li>
<li>Get at least an 8GB empty USB stick and plug it into your system.</li>
<li>Run Balena Etcher or Rufus, import the downloaded ISO, and start the process.</li>
<li>It will take 5-10 minutes to create a bootable USB.</li>
<li>Now, based on your device brand, find its boot keys—just Google it.</li>
<li>Reboot your system and say goodbye to Windows.</li>
<li>Press the boot keys when booting, select your USB stick, and click enter.</li>
<li>Now, after booting, you will be presented with a live environment. Whatever changes you make here will be gone with a reboot.</li>
<li>Now, simply follow the on-screen instructions and make a clean install on your storage device.</li>
</ul>
<blockquote>
<p><strong>Note</strong>: Unfortunately, this method is not possible on Apple devices. Though there are ways, they are complicated.</p></blockquote>
<blockquote>
<p><strong>IMPORTANT</strong>: Installation on Bare Metal is not recommended for beginners because there is a higher chance you could lose all your data, and I don&rsquo;t want you to curse me for that.</p></blockquote>
<h4 id="windows-subsystem-for-linux">Windows Subsystem for Linux</h4>
<p>It&rsquo;s a method to run Linux directly on your Windows system using the subsystem for Linux. It&rsquo;s a very straightforward method for any Windows user:</p>
<ul>
<li>Check if your device supports virtualization.</li>
<li>Open PowerShell as Administrator.</li>
<li>Run <code>wsl --install</code>.</li>
<li>That&rsquo;s it; it will install Ubuntu by default.</li>
</ul>
<blockquote>
<p><strong>INFO</strong>: Earlier, it was a long process to do, like configuring in the control panel to enable the WSL service, then proceeding with manually installing it from the Microsoft Store, and it wasn&rsquo;t that feature-rich.</p></blockquote>
<blockquote>
<p><em>Thank God Microsoft streamlined this feature to make it quick and efficient.</em></p></blockquote>
<h4 id="cloud">Cloud</h4>
<p>This process allows us to spin up a virtual machine directly on the cloud. Though they do cost some money, it&rsquo;s a good option if you are already familiar with services like AWS/Azure/GCP. You can also use third-party services like Linode.</p>
<p>If you just need to get familiar with the command-line interface, Google IDX is a good option, as it provides a terminal window where you can practice commands and also learn the NIX package manager. On the other hand, you can use Google Cloud Shell too, which also uses an APT-like package manager.</p>
<blockquote>
<p>There are infinite possibilities; it just depends on what you are comfortable with. The basic commands on Linux are the same everywhere. Every distro has a layer on top to make some repetitive processes easy. That&rsquo;s it. Nothing else.</p></blockquote>
<h2 id="linux-distributions-what-are-they-and-why-so-many">Linux Distributions: What Are They and Why So Many?</h2>
<p>Now, you might be thinking, why did I recommend you use Pop! OS or Ubuntu? What are they, and so on? <em>Good question&hellip; Next question?&hellip; Joking.</em></p>
<p>Look, as I said, Linux is a kernel, which uses a lot of other utilities that make it an OS for performing different tasks. These utilities can be anything (desktop GUI, icons, fonts, tools, drivers, etc.).</p>
<p>Linux has multiple distributions (also known as flavors). As stated earlier, there are about 600+ distros (<em>short for distributions</em>), each with its own purpose, use cases, and communities built to maintain them and provide forums for support.</p>
<h3 id="some-major-linux-distros-">Some Major Linux Distros:-</h3>
<ul>
<li><strong>Ubuntu</strong>: A <strong>Debian</strong>-based Linux distro, famous for its user-friendly nature and interface, which is somewhat similar to Windows. It’s popular for beginners and is also widely used in server environments.</li>
<li><strong>Kali Linux</strong>: A specialized Linux distro primarily used by <strong>penetration testers</strong>, ethical hackers, and security researchers. Kali comes preloaded with a wide range of security and forensic tools.</li>
<li><strong>Linux Mint and Pop! OS</strong>: Lightweight distros, also based on <strong>Ubuntu</strong> and <strong>Debian</strong>, designed to be easy to use and very similar to the traditional Windows desktop experience.</li>
<li><strong>Arch Linux</strong>: A minimalist, DIY distro that follows the <strong>KISS (Keep It Simple, Stupid)</strong> principle. Arch is favored by advanced users who want full control over their system. It’s not beginner-friendly but offers total customization. (<em>I use Arch, by the way!</em>)</li>
<li><strong>Fedora</strong>: A cutting-edge, community-driven distro with a focus on free and open-source software. It is often used by developers and those who want the latest features in an enterprise-friendly package.</li>
<li>And more like <strong>Slackware</strong>, <strong>openSUSE</strong>, <strong>Alpine</strong>, etc.</li>
</ul>
<p>I know it&rsquo;s confusing, and once you go deeper into the rabbit hole, you will explore more and more overly complicated stuff like <strong>Gentoo</strong>, <strong>Linux From Scratch</strong>, and a lot more.</p>
<h3 id="concept-of-distro-hopping-and-how-to-overcome-it">Concept of Distro Hopping and How to Overcome It</h3>
<p>It&rsquo;s common for people who start using Linux to get lost in <strong>distro hopping</strong> (the process where users try out the most popular Linux distros to find a perfect fit for them).</p>
<p>We all have been through that phase, and here are a few tips to avoid it:</p>
<ul>
<li>
<p>There are only 3-4 main distros on which others depend: Debian, Arch, Fedora &amp; openSUSE.</p>
</li>
<li>
<p>Never judge a distro based on its looks; you can replicate any theme, UI, or specific feature of one distro on another using Package Managers (it&rsquo;s like a place where you download software/tools from, just like the Microsoft Store or App Store. More on that later).</p>
</li>
<li>
<p>What matters is your use case.</p>
<ul>
<li><strong>For developers</strong>: Recommend Arch or Fedora due to their rolling releases.</li>
<li><strong>For general users</strong>: Ubuntu or Mint for a user-friendly experience.</li>
<li><strong>For security professionals</strong>: Kali Linux or Parrot Security OS.</li>
</ul>
</li>
<li>
<p>That&rsquo;s it. There are thousands of distros out there, but in reality, they are just some visual enhancements. That&rsquo;s it. I like to call them Niche distros.</p>
</li>
</ul>
<blockquote>
<p><strong>TIP</strong>: Don&rsquo;t Fall into the Distro Hopping Trap<br>
<strong>Pick a distro, stick with it, and get better at it</strong>.<br>
There’s no need to constantly jump between distros. If you&rsquo;re a beginner, <strong>Debian</strong> or <strong>Ubuntu</strong> are great choices. For more experienced users, <strong>Arch</strong> is ideal for customization &amp; advanced users, and <strong>Fedora</strong> is the go-to for enterprise use.</p></blockquote>
<blockquote>
<p><strong>HINT</strong>:<br>
In future articles, we might explore some ways you can create your very own distro too. Stay Tuned.</p></blockquote>
<blockquote>
<p><strong>Did you know?</strong><br>
There are even some distros like <em><strong>Hannah Montana Linux</strong></em>, <em><strong>Biebian (for Justin Bieber fans)</strong></em>, <em><strong>Red Star OS (North Korea&rsquo;s official Linux distro, you can imagine how great that would be)</strong></em>, and even <em><strong>Linux XP (mimics Windows XP)</strong></em>.</p></blockquote>
<h2 id="the-command-line-the-heart-of-linux">The Command Line: The Heart of Linux</h2>
<p>The core concept of Linux is getting familiar with the terminal. Yeah, it&rsquo;s that black screen with the blinking cursor—that&rsquo;s the Command Line Interface (CLI). I know it can be overwhelming for many (maybe everyone starting out&hellip; I was too). I actually tried avoiding it as much as possible in the initial days of my Linux switch. But eventually, we have to use it, and that&rsquo;s the hard pill to swallow. However, once you actually understand the power of the terminal, you might never leave it again.</p>
<p><strong>Here are a few solid reasons why it&rsquo;s a must-have skill:</strong></p>
<ul>
<li>Day-to-day tasks like listing, editing, removing, and copying files in folders get easier.</li>
<li>Understanding package managers (depending on the distro) to install software.</li>
<li>Unlike Windows, downloading software is different. Linux users prefer commands like <strong><code>wget</code></strong> and <strong><code>curl</code></strong> to download something. But don&rsquo;t worry—there are download buttons too, haha.</li>
<li>Managing and configuring WiFi and the internet becomes easy.</li>
<li>Configuring user permissions, checking system resources, creating or running scripts, and a lot more&hellip; <em>basically everything you could ever imagine.</em></li>
</ul>
<p><strong>Now that we know how powerful terminals are, let&rsquo;s quickly address some of the basic commands every Linux user should know:</strong></p>
<ol>
<li><strong><code>ls</code></strong> – List files in a directory
<ul>
<li>Example: <code>ls</code> shows all files and folders in the current directory.</li>
</ul>
</li>
<li><strong><code>pwd</code></strong> – Show the current directory
<ul>
<li>Example: <code>pwd</code> will display the full path to your current directory (e.g., <code>/home/user</code>).</li>
</ul>
</li>
<li><strong><code>cd</code></strong> – Change directory
<ul>
<li>Example: <code>cd Documents</code> moves into the &ldquo;Documents&rdquo; folder.</li>
<li><code>cd ..</code> moves up one directory level.</li>
</ul>
</li>
<li><strong><code>echo</code></strong> – Display text or values
<ul>
<li>Example: <code>echo &quot;Hello, World!&quot;</code> prints the text on the screen.</li>
</ul>
</li>
<li><strong><code>cp</code></strong> – Copy files or directories
<ul>
<li>Example: <code>cp file1.txt file2.txt</code> copies the contents of <code>file1.txt</code> to <code>file2.txt</code>.</li>
</ul>
</li>
<li><strong><code>mv</code></strong> – Move or rename files or directories
<ul>
<li>Example: <code>mv oldname.txt newname.txt</code> renames the file.</li>
</ul>
</li>
<li><strong><code>rm</code></strong> – Remove files or directories
<ul>
<li>Example: <code>rm file1.txt</code> deletes the file <code>file1.txt</code>.</li>
<li>Use <code>-rf</code> to delete a folder directly.</li>
</ul>
</li>
<li><strong><code>mkdir</code></strong> – Create a new directory
<ul>
<li>Example: <code>mkdir new_folder</code> creates a new directory named &ldquo;new_folder&rdquo;.</li>
</ul>
</li>
<li><strong><code>rmdir</code></strong> – Remove an empty directory
<ul>
<li>Example: <code>rmdir empty_folder</code> removes an empty directory.</li>
</ul>
</li>
<li><strong><code>cat</code></strong> – Display file contents
<ul>
<li>Example: <code>cat file1.txt</code> shows the content of <code>file1.txt</code> on the screen.</li>
</ul>
</li>
<li><strong><code>man</code></strong> – View the manual for a command
<ul>
<li>Example: <code>man ls</code> shows the manual page for the <code>ls</code> command, helping you understand how to use it.</li>
</ul>
</li>
<li><strong><code>touch</code></strong> – Create an empty file
<ul>
<li>Example: <code>touch newfile.txt</code> creates an empty file named <code>newfile.txt</code>.</li>
</ul>
</li>
<li><strong><code>clear</code></strong> – Clear the terminal screen
<ul>
<li>Example: <code>clear</code> clears all text from the terminal, giving you a clean screen.</li>
</ul>
</li>
<li><strong><code>history</code></strong> – View your command history
<ul>
<li>Example: <code>history</code> shows the list of commands you’ve used in the terminal.</li>
</ul>
</li>
<li><strong><code>exit</code></strong> – Exit the terminal session
<ul>
<li>Example: <code>exit</code> closes your current terminal window.</li>
</ul>
</li>
</ol>
<blockquote>
<p><strong>TIP</strong><br>
Linux terminals can be overwhelming at times, especially when we are just starting out. And for this, we have a helper, i.e., <code>man</code>. Nice naming, isn&rsquo;t it? <em>It&rsquo;s like how we ask questions in real life, &ldquo;Man, what is this?&rdquo;</em> <em>Silly jokes aside.</em><br>
We can use this command like <strong><code>man &lt;TOOL_NAME&gt;</code></strong>, for example, <strong><code>man ls</code></strong> or <strong><code>man lsblk</code></strong>. It gives us complete A-Z usage of the tool directly from the terminal. In Linux, it’s more about reading first than implementing.<br>
Many tools also have their own help menus, which we can access by <strong><code>-h</code></strong> or <strong><code>--help</code></strong>. It gives us a sweet little usage guide using flags.<br>
BTW, anything starting with <strong><code>-</code></strong> or <strong><code>--</code></strong> in a command like <strong><code>--help</code></strong> is known as a flag. We can use multiple flags in one command to ease our life.</p></blockquote>
<blockquote>
<p><strong>Text Editors</strong><br>
Text editors are basically used to edit files quickly. Vim, Nano, and Emacs are all different types of text editors.
The difficulty levels for these are: <strong>Nano &gt; Vim &gt; Emacs.</strong></p></blockquote>
<blockquote>
<p><strong>Suggestion</strong>: If you ever accidentally stumble upon <strong><code>vim</code></strong>, don’t worry—you can exit it with <strong><code>esc</code></strong> then <strong><code>:q!</code></strong>. It’s something that will definitely make you mad at first.</p></blockquote>
<h2 id="linux-file-system-structure">Linux File System Structure</h2>
<p>Unlike the Windows file system, Linux has a more structured and hierarchical approach. Everything in Linux is a <strong>file</strong>—whether it&rsquo;s system drivers, memory processes, configuration files, or even hardware-related components. This design makes Linux extremely flexible but also requires a bit of understanding to navigate efficiently.</p>
<h3 id="users-and-groups-in-linux">Users and Groups in Linux</h3>
<p>Before we understand where files are stored and how access is managed, we need to know who controls them—this is where users and groups come in.</p>
<p><strong>Users in Linux</strong><br>
In Linux, the most important user is <strong>root</strong>. Think of it as an admin (or in layman’s terms, we can call it the god of Linux). The <strong>root</strong> user has unrestricted access to the system, similar to the <strong>Administrator</strong> account on Windows, but with even more control. So, the root user has enough access to break the entire system or completely wipe everything (which is something very common if you don&rsquo;t pay attention).</p>
<p>However, as we know, with great responsibility comes great risk, meaning using root directly is dangerous. This brings up another question: How do we use the system?</p>
<p>Basically, in Linux, we can have multiple users, not just one or two—potentially infinite. One device can be used by many people, just like in Windows where we can create users. It’s a similar concept. All users have their own directory where only their data is saved, and no other user can access it.</p>
<p><strong>Groups in Linux</strong><br>
Not all users have the same responsibilities or permissions. We can’t trust everyone fully, so instead of manually assigning permissions to each user (which is a hectic task), Linux allows us to group users together.</p>
<p>Users can be assigned to a <strong>group</strong>, making management easier. Groups work just like teams in a company—each group has specific permissions, making it easier to manage access control.</p>
<p><strong>User Management Commands:-</strong></p>
<p>I know theory is boring, so let&rsquo;s dive into practicals:-</p>
<ol>
<li>
<p>Create a new user:</p>
<ul>
<li><code>sudo adduser &lt;USERNAME&gt;</code> <em>// here <code>&lt;USERNAME&gt;</code> should be replaced by the desired username</em></li>
<li>Creates a new user and sets home directory (<code>/home/&lt;USERNAME&gt;</code>)</li>
<li>It will ask you to set a password for the user too</li>
</ul>
</li>
<li>
<p>Delete a user:</p>
<ul>
<li><code>sudo deluser &lt;USERNAME&gt;</code></li>
<li>This removes the user but doesn’t delete the home directory</li>
<li><code>sudo deluser --remove-home &lt;USERNAME&gt;</code> <em>// deletes home directory too.</em></li>
</ul>
</li>
<li>
<p>Change user password:</p>
<ul>
<li><code>sudo passwd &lt;USERNAME&gt;</code></li>
<li>Prompts you to enter the new password for the user</li>
</ul>
</li>
<li>
<p>Switch to another user:</p>
<ul>
<li><code>su - &lt;USERNAME&gt;</code></li>
<li>To return to your previous user, type: <code>exit</code></li>
</ul>
</li>
<li>
<p>Create a new group:</p>
<ul>
<li><code>sudo addgroup &lt;GROUPNAME&gt;</code></li>
</ul>
</li>
<li>
<p>Add a user to a group:</p>
<ul>
<li><code>sudo usermod -aG &lt;GROUPNAME&gt; &lt;USERNAME&gt;</code></li>
<li>The <code>-aG</code> option adds the user to the group without removing them from other groups</li>
</ul>
</li>
<li>
<p>Remove a user from a group:</p>
<ul>
<li><code>sudo deluser &lt;USERNAME&gt; &lt;GROUPNAME&gt;</code></li>
</ul>
</li>
<li>
<p>List groups for a user:</p>
<ul>
<li><code>groups &lt;USERNAME&gt;</code></li>
</ul>
</li>
<li>
<p>Check current user:</p>
<ul>
<li><code>whoami</code></li>
</ul>
</li>
<li>
<p>View User ID (UID) and Group ID (GID):</p>
<ul>
<li><code>id &lt;USERNAME&gt;</code></li>
</ul>
</li>
</ol>
<blockquote>
<p><strong>You might not know</strong><br>
Specific commands like <code>addgroup</code>, <code>delgroup</code>, <code>adduser</code>, <code>deluser</code> are for Debian-based distros.<br>
But, in Arch Linux, it&rsquo;s <code>groupadd</code>, <code>groupdel</code>, <code>useradd</code>, <code>userdel</code> commands.<br>
The reason it&rsquo;s like this is that, in Debian-based distros, it acts as a wrapper for the same command (visual enhancement only) that Arch Linux uses, as they are true to <strong>UNIX fundamentals</strong>, which suggests that Arch sticks to roots and keeps things minimal.</p></blockquote>
<h3 id="understanding-the-linux-file-system-hierarchy-fhs">Understanding the Linux File System Hierarchy (FHS)</h3>
<p>UNIX-based systems are known for their File System Hierarchy Standard (FHS). It&rsquo;s basically the entire file structure of the system. As we know, everything in Linux is a file, so its management is really important.</p>
<p><strong>Common Directories and Their Functions:-</strong></p>
<table>
  <thead>
      <tr>
          <th>Directory</th>
          <th>Purpose</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><code>/</code> (root)</td>
          <td>The top-most directory; everything starts from here.</td>
      </tr>
      <tr>
          <td><code>/bin</code></td>
          <td>Essential programs (like <code>ls</code>, <code>cp</code>, <code>mv</code>, <code>rm</code>). Used by all users.</td>
      </tr>
      <tr>
          <td><code>/boot</code></td>
          <td>Bootloader configurations for booting (like <code>EFI</code>, <code>Grub</code>, <code>ReFind</code>).</td>
      </tr>
      <tr>
          <td><code>/dev</code></td>
          <td>Device files (like <code>/dev/sda</code> for hard disks, <code>/dev/null</code>, <code>/dev/sdb</code> for USB devices).</td>
      </tr>
      <tr>
          <td><code>/etc</code></td>
          <td>System configuration files (e.g., <code>/etc/passwd</code>, <code>/etc/fstab</code>).</td>
      </tr>
      <tr>
          <td><code>/sbin</code></td>
          <td>System-related binaries (like <code>fsck</code>, <code>iptables</code>, <code>shutdown</code>). Used mainly by root/admin.</td>
      </tr>
      <tr>
          <td><code>/home</code></td>
          <td>Home directories for users (<code>/home/user1</code>, <code>/home/user2</code>).</td>
      </tr>
      <tr>
          <td><code>/root</code></td>
          <td>Root user’s home directory (not in <code>/home</code>).</td>
      </tr>
      <tr>
          <td><code>/var</code></td>
          <td>Variable data (logs, caches, databases) like <code>/var/log/syslog</code>.</td>
      </tr>
      <tr>
          <td><code>/usr</code></td>
          <td>User-installed software and libraries (<code>/usr/bin</code>, <code>/usr/lib</code>). <code>/usr/local/bin</code> for custom executables.</td>
      </tr>
      <tr>
          <td><code>/tmp</code></td>
          <td>Temporary files that are deleted on reboot.</td>
      </tr>
      <tr>
          <td><code>/proc</code></td>
          <td>Virtual directory for process and kernel info (<code>/proc/cpuinfo</code>).</td>
      </tr>
      <tr>
          <td><code>/mnt</code></td>
          <td>Temporary mount point for external drives.</td>
      </tr>
      <tr>
          <td><code>/media</code></td>
          <td>Auto-mounted external drives (USBs, DVDs).</td>
      </tr>
  </tbody>
</table>
<h3 id="navigating-the-file-system-using-the-terminal">Navigating the File System Using the Terminal</h3>
<p>As we have already discovered commands like <code>ls</code>, <code>cd</code>, <code>pwd</code>, now let&rsquo;s go a little deeper to understand things more:-</p>
<ol>
<li>
<p><strong>Absolute Path</strong>: Full path from the root (<code>/</code>) directory.
<em>Example: <code>/home/user/Documents/file.txt</code></em></p>
</li>
<li>
<p><strong>Relative Path</strong>: Path relative to the current directory.
<em>Example: If you&rsquo;re in <code>/home/user/</code>, then <code>cd Documents</code> is the same as <code>cd /home/user/Documents</code>.</em></p>
</li>
</ol>
<p><strong>Some Navigation Tips</strong>:-</p>
<ul>
<li><code>cd ..</code> → Move up one directory</li>
<li><code>cd -</code> → Switch to the previous directory</li>
<li><code>cd ~</code> or just <code>cd</code> → Move to your home directory</li>
<li><code>cd ~/home/user/Documents</code> → Move to a specific folder (if you are familiar with paths, which you will be as you practice.)</li>
<li><code>ls -l</code> → Long format listing (permissions, ownership, size, etc.)</li>
<li><code>ls -a</code> → Show hidden files (files starting with <code>.</code>)</li>
</ul>
<h3 id="common-linux-filesystems">Common Linux Filesystems</h3>
<p>A <strong>file system</strong> manages how data is stored, retrieved, and structured on a storage device. It includes:</p>
<ul>
<li><strong>Data Structure</strong> → Defines how files, directories, and metadata are stored.</li>
<li><strong>Journal &amp; Recovery</strong> → Some file systems support journaling for data protection.</li>
<li><strong>Performance &amp; Efficiency</strong> → Affects read/write speeds and storage optimization.</li>
<li><strong>Features</strong> → Encryption, snapshots, compression, deduplication, etc.</li>
</ul>
<table>
  <thead>
      <tr>
          <th>Filesystem</th>
          <th>Features</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><code>ext4</code></td>
          <td>Default, stable, widely used.</td>
      </tr>
      <tr>
          <td><code>XFS</code></td>
          <td>Great for large files, high performance.</td>
      </tr>
      <tr>
          <td><code>Btrfs</code></td>
          <td>Supports snapshots, data integrity, and compression.</td>
      </tr>
      <tr>
          <td><code>ZFS</code></td>
          <td>Best for data integrity, RAID-like features.</td>
      </tr>
      <tr>
          <td><code>exFAT</code></td>
          <td>Works across Windows, Linux, macOS.</td>
      </tr>
  </tbody>
</table>
<blockquote>
<p><strong>NOTE</strong>:
For beginners, it&rsquo;s common that you might be on your desktop or VM, so I would recommend going for ext4. It&rsquo;s the most widely used filesystem, very stable, and not hardware-intensive. As you get familiar, you can try the other filesystems as needed. But keep in mind, basic fundamentals stay the same.</p></blockquote>
<h3 id="mounting-and-unmounting-file-systems">Mounting and Unmounting File Systems</h3>
<ul>
<li><strong>Mounting a Device</strong>:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo mount /dev/sdxx /mnt <span style="color:#75715e"># sdxx can be sda1, sdb, etc.</span>
</span></span><span style="display:flex;"><span>ls /mnt
</span></span></code></pre></div><ul>
<li><strong>Unmounting</strong>:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo umount /mnt
</span></span></code></pre></div><ul>
<li><strong>Permanent Mounting (fstab)</strong>:
To auto-mount a partition at boot, add to <code>/etc/fstab</code></li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>UUID<span style="color:#f92672">=</span>xxxxx /mnt ext4 defaults <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">2</span>
</span></span></code></pre></div><blockquote>
<p><strong>NOTE</strong>: You can find UUID using <code>lsblk -f</code></p></blockquote>
<h3 id="hard-links-vs-soft-links-and-symlinking">Hard Links vs. Soft Links and Symlinking</h3>
<ul>
<li>
<p><strong>Hard Links</strong></p>
<ul>
<li>A hard link is an additional name for the <strong>same file</strong>, no extra storage used.</li>
<li>If you delete the original file, the data remains.</li>
<li>Best for backups, redundancy, efficiency.</li>
<li>Eg: <code>ln file1 hardlink1</code>.</li>
</ul>
</li>
<li>
<p><strong>Soft Links (Symbolic Links)</strong></p>
<ul>
<li>A symlink points to another file’s <strong>path</strong>, not its data.</li>
<li>If you delete the original file, the symlink breaks.</li>
<li>Best for shortcuts, cross-partition linking.</li>
<li>Eg: <code>ln -s file1 symlink1</code>.</li>
</ul>
</li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>That was a lot to process, but there&rsquo;s even more just around the corner.</p>
<p>In the upcoming blogs, we’ll dive deeper into Linux, covering system administration, security, troubleshooting, and more. Who knows? You might build your custom Linux distro by the end of this series. Stay tuned!</p>
<p>Remember— <strong>Practical &gt; Theoretical</strong>.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Why I Started Blogging</title>
      <link>http://localhost:1313/posts/why-i-started-blogging/</link>
      <pubDate>Sat, 07 Dec 2024 23:59:15 +0530</pubDate>
      
      <guid>http://localhost:1313/posts/why-i-started-blogging/</guid>
      <description>A little about me, why blogging and what can users expect with these blogs.</description>
      <content:encoded><![CDATA[<h2 id="a-little-about-me">A little about me</h2>
<p>Hi, there a random user, welcome to my first ever blog. Thou i am not sure whom i am greeting to cauz i don&rsquo;t think anyone would ever read it. Haha&hellip;laughing at my own jokes, my old act.ShowShareButtons: true</p>
<p>Lemme introduce me to yeah all, especially those Google&rsquo;s web crawlers. I am <strong>Samay Kumar</strong>, known to no one by username <strong><a href="https://github.com/samay15jan">samay15jan</a></strong>.</p>
<p>Am a Software Developer by profession <em>(i consider myself in my good books)</em>, but in reality am a just keen learner who just tries to explore technologies&hellip;<em>yeah u can call me a tech enthusiast</em>.</p>
<h2 id="my-journey-to-blogging">My journey to blogging</h2>
<p>If i really be honest, i don&rsquo;t exactly consider it as a blog. I&rsquo;m just here to express myself to the world without having any barriers. It&rsquo;s a place where my voice is the only thing u could hear&hellip;<em>voice ? hear ? Seriously, whats wrong with me</em>.</p>
<p>I gained my inspiration for blogging from a random user on internet named <strong><a href="https://boonepeter.github.io">Peter Boone</a></strong>.<br>
So on a fine day, after a long break in my coding journey, i wanted to try something fun. Eventually, i questioned myself &ldquo;How exactly does Spotify scan codes actually works ?&rdquo; more about in <strong><a href="https://samay15jan.github.io/posts/exploring-spotify-scan-codes/">this</a></strong> blog.</p>
<p>And from there i stumbled on one of his article, suddenly an idea ignited. An idea to start to start something similar just so that i can have my very own corner on internet.<br>
So, here i am using hugo with papermodx theme and writing my very own blog about &ldquo;Why i started blogging&rdquo;.</p>
<h2 id="what-can-u-expect-">What can u expect ?</h2>
<p>Let&rsquo;s quickly address the key points of what can u expect with these blogs, cauz it helps in&hellip;<em><strong>coughs</strong></em>&hellip;SEO Ranking. <em><strong>Ehh ?</strong></em> Sorry, User Experience:-</p>
<ul>
<li>Gain ultimate knowledge from your top notch blogger.</li>
<li>Learn about tech tutorials, cool tricks and alot more</li>
<li>A place where <del>i can waste my time</del> u can get a better understanding of complex stuff in simplest and fun manner.</li>
<li>Learn how <strong>not</strong> to get inspired by your top notch blogger, so u get an idea what not to do.</li>
<li>Exclusive insights about latest and older tech from your very own top notch blogger.</li>
</ul>
<blockquote>
<p>Note: Enough bragging, simply these blogs shouldn&rsquo;t be a thing u should entirely trust on, do your research, let that brain of yours do some work.</p></blockquote>
<h2 id="conclusion">Conclusion</h2>
<p>After all of those heart touching words from your neighborhood blogger, u should conclude that, u guys are going to get some good knowledge, tutorials, insights of technologies and learn from the mistake i made <em>(which i am not going to share hehe)</em>.</p>
<p>But still keep your eyes open for the mind boggling beginning of our new journey, where i am as blank like u are after reading this blog, cauz we both don&rsquo;t know what is gonna happen next.</p>
<p>See yeah on the other side.</p>
<blockquote>
<p>PS: Never trust a 19 years old top notch blogger who just started out.</p></blockquote>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
